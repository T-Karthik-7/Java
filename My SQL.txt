oracle
https://drive.google.com/file/d/0B_8PmSMM3tRdMl9PS1hUMFFEbkk/view?usp=sharing&resourcekey=0-qjqe8sjixyAi8meOXxO_jQ
---------------------------------------------------------------------------------------------------------------------------------------------
Mysql
--------------------------
https://drive.google.com/file/d/1HlAmljsSXdyCjkoss0-adUZf_UEMj1aF/view?usp=share_link
------------------------------------------------------------------------------------------------------------------------------------------------

https://github.com/sandipmohapatra/Batch31july
------------------------------------------------------------------------------------------------
MySql
----------------------
To see the databases
1)show databases;
-----------------------------------------------------
to create database
2)create database cognizantstud;
--------------------------------------------------------
to goto the database
3)use cognizantstud;
-------------------------------------------------------
to drop database
4)drop database cognizantstud;
-----------------------------------------------------------------------
to create a table
5)create table student1
( studid int not null auto_increment,
name varchar(30) not null,
address varchar(30) not null,
primary key(studid)
);
----------------------------------------------------------------------------------
6)to insert record
INSERT INTO student1(NAME,address) VALUES('sandip','bangalore');
insert into student1 values(101,'tarun','chennei');
-----------------------------------------------------------------------------------
7)to view the records 
select * from student;
------------------------------------------------------------
8)update the record
update student set address='Bangalore' where name='tarun';
--------------------------------------------------------------------------
9)to create a view (view will not contain any data.it will contain only the query)
create view stud as select studid,name from student;
we can do insert,update and delete of the view it will reflect to the base table.
-------------------------------------------------------------------------------
10)to see all the tables and views
show tables;
----------------------------------------------------------------------
11)where condition :-
select * from student where name='tarun';
-------------------------------------------------------------------------
12)distinct :-(unique data will be displayed)
select distinct address from student;
-------------------------------------------------------------------------------
13)order by:-
select * from student order by name;
select * from student order by name asc;
select * from student order by name desc;
--------------------------------------------------------------------------------
14)group by
select address, count(*) from student group by address;
-----------------------------------------------------------------------------------
15)aggregate function
count(),sum(),avg(),min(),max(),first(),last()
---------------------------------------------------------------------
i)select count(*) from student;
first record  :- select name from student limit 1;
last record :-select name from student order by name desc limit 1;
--------------------------------------------------------------------------------------------
16)alter table:-
alter table student add salary int not null;
to add data to salary column :-
update student set salary=45000 where studid=101;
update student set salary=35000 where studid in (102,103,104);
---------------------------------------------------------------------------------
17)select sum(salary) from student;
18)select avg(salary) from student;
19)select min(salary) from student;
20)select max(salary) from student;
----------------------------------------------------------------------------------------------
between and example:-
21)select * from student where salary between 30000 and 46000;
----------------------------------------------------------------------------------------------
like % (wildcard)
----------------------------------------------------------------------------
22)select * from student where name like 'p%';(word starting with p will display)
select * from student where name like '%r';(word ending with r will display)
---------------------------------------------------------------------------
23)truncate table:-
it will delete all the data from the table.
truncate table student;
--------------------------------------------------------------------------- 
24)drop table;
it will delete the data as well as the table also.
drop table student;
-------------------------------------------------------------------------------

25)join
------------------------
create table marks
(studid int(4),
phy int(4),
chem int(4),
maths int(4),
tot int(4),avg int(4));

i)insert into marks(studid,phy,chem,maths) values(101,56,67,78);
ii)update marks set tot=(phy+chem+maths) where studid in (101,102,103);
iii)update marks set avg=tot/3 where studid in (101,102,103);
--------------------------------------

joining 2 tables:-
---------------------------
select a.studid,a.name,a.address,a.salary,b.phy,b.chem,b.maths,b.tot,b.avg from student a,marks b where a.studid=b.studid;
---------------------------------
composite KEY
--------------------------------
CREATE TABLE mphasisstudents
( studid INT NOT NULL AUTO_INCREMENT,
NAME VARCHAR(30) NOT NULL,
address VARCHAR(30) NOT NULL,
location VARCHAR(30) NOT NULL,
PRIMARY KEY(studid,NAME)
);

----------------------------------------------------------------------------------------
CREATE TABLE mphasisstudent
( studid INT NOT NULL AUTO_INCREMENT,
NAME VARCHAR(30) DEFAULT NULL UNIQUE,
address VARCHAR(30) DEFAULT NULL,
location VARCHAR(30) DEFAULT NULL,
PRIMARY KEY(studid,NAME)
);
-----------------------------------------------------------------
31st July 2023
---------------------------
create table
1)create table employee(empno int,name varchar(30),address varchar(30));

2)insert data
insert into employee values(101,'sandip','Bangalore');

3)select data
select * from employee;
select * from employee where empno=101;

4)to add a column
alter table employee add phy int;
alter table employee add chem int;
alter table employee add math int;

5)insert the data into the columns
update employee set phy=67,chem=76,math=77 where empno=101;
update employee set phy=67,chem=76,math=77 where empno=102;
update employee set phy=67,chem=76,math=77 where empno=103;

6) alter table employee add total int;
 alter table employee add avg int;

7) update employee set total=phy+chem+math;

8) update employee set avg=total/3;

---------------------------------------------------------------------------------
create table student
(studid int not null auto_increment,
name varchar(30) not null,
address varchar(30) not null,
primary key(studid)
);
----------------------------------------------------------
1)not null :- we cannot leave the field empty.
2)auto_increment :- It will automatically increment.
3)primary key :- We cannot leave the field empty and we have to enter unique value.

----------------------------------------------------------------------------
 insert into student(name,address) values('Madhu','Bangalore');
---------------------------------------------------------------------------------------------
view :- you table contains 50 columns.
10 columns regularly.

you can do the DML operation on view .It will reflect the master table.
1)insert 2)update 3)delete

------------------------------------------------------------------------------------------------------
JDBC :- java database connectivity

1)load the driver (oracle driver,MySql driver)
2)create connection
i)Database name
ii)username/password
3)Statement/PreparedStatement (sql query)
4)execute 
------------------------------------------------------------------
prg-1
-------------
import java.sql.*;
public class First 
{
public static void main(String[] args) throws Exception
{
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/itcinfotech","root","1234");
	Statement st=con.createStatement();
	//st.execute("create table student1(stdno int,name varchar(30),address varchar(30))");
	//System.out.println("Table created");
	st.execute("insert into student1 values(102,'kiran','Bangalore')");
	System.out.println("row inserted");
}
}
--------------------------------------------------------------------------------------------------------------
prg-2
------------
import java.sql.*;
import java.util.*;
public class First 
{
public static void main(String[] args) throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter studentno,name and address");
	int stdno=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/itcinfotech","root","1234");
	PreparedStatement st=con.prepareStatement("insert into student1 values(?,?,?)");
	st.setInt(1,stdno);
	st.setString(2,name);
	st.setString(3, address);
	st.execute();
	System.out.println("row inserted");
}
}
--------------------------------------------------------------------------------------------
prg-3
--------------
import java.util.*;
import org.bson.Document;
import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class First {

	public static void main(String[] args) {
		try {
			/*
			 * Scanner ob=new Scanner(System.in); System.out.println("enter key and value");
			 * String k1=ob.next(); String v1=ob.next();
			 */
			MongoClient mongoClient = new MongoClient( "localhost" , 27017 );  
			//---------- Creating DataBase ---------------------------//  
			MongoDatabase db = mongoClient.getDatabase("ITCinfoech");  
			//---------- Creating Collection -------------------------//  
			MongoCollection<Document> table = db.getCollection("employee");  
			//---------- Creating Document ---------------------------//    
			Document doc = new Document("Name","Arun");  
			doc.append("id",12);  
			doc.append("address","Bangalore");  
			doc.append("Phoneno","9988776655");  
						//----------- Inserting Data ------------------------------//  
			table.insertOne(doc);  
		}catch(Exception e){  
			System.out.println(e);  
		}  
	}  
}  
-----------------------------------------------------------------------------------
prg-4
-------------
import com.mongodb.client.FindIterable; 
import com.mongodb.client.MongoCollection; 
import com.mongodb.client.MongoDatabase; 
import com.mongodb.client.model.Filters; 
import com.mongodb.client.model.Updates; 
import java.util.Iterator;
import org.bson.Document;
import com.mongodb.MongoClient;

public class Second {

	public static void main(String[] args) 
	{
	

			MongoClient mongoClient = new MongoClient( "localhost" , 27017 );  
			//---------- Creating DataBase ---------------------------//  
			MongoDatabase db = mongoClient.getDatabase("ITCinfoech");  
			//---------- Creating Collection -------------------------//  
			MongoCollection<Document> collection = db.getCollection("employee");  
			
			//---------- Creating Document ---------------------------//    
			collection.updateOne(Filters.eq("id", 12), Updates.set("address", "TamilNadu"));  
     
		      System.out.println("Document update successfully...");  
		      
		      // Retrieving the documents after updation 
		      // Getting the iterable object
		      FindIterable<Document> iterDoc = collection.find(); 
		      int i = 1; 
		      // Getting the iterator 
		      Iterator it = iterDoc.iterator(); 
		      while (it.hasNext()) {  
		         System.out.println(it.next());  
		         i++; 
		      }     
		   }  
	}
------------------------------------------------------------------------------------------------------------------
prg-5
-------------
import java.util.*;
public class Six 
{
public static void main(String[] args)
{
ArrayList<String> al=new ArrayList<String>();
al.add("Apple");
al.add("Orange");
al.add("Grapes");
al.add("Mango");
al.add("Banana");
System.out.println(al);

  System.out.println("****************"); 
  for(String ab:al)
  System.out.println(ab);
  System.out.println("****************");
  Iterator   it=al.iterator(); 
  while(it.hasNext()) 
  { 
	  System.out.println(it.next());
  }
  System.out.println("****************");
 

ListIterator it1=al.listIterator();
while(it1.hasNext())
{
	System.out.println(it1.next());
}
System.out.println("****************");
while(it1.hasPrevious())
{
	System.out.println(it1.previous());
}


}
}
------------------------------------------------------------------------------------------------------------------------------------

prg-6
-------------
import com.mongodb.client.FindIterable; 
import com.mongodb.client.MongoCollection; 
import com.mongodb.client.MongoDatabase; 
import com.mongodb.client.model.Filters; 
import com.mongodb.client.model.Updates; 
import java.util.Iterator;
import org.bson.Document;
import com.mongodb.MongoClient;

public class Third {

	public static void main(String[] args) 
	{
	

			MongoClient mongoClient = new MongoClient( "localhost" , 27017 );  
			//---------- Creating DataBase ---------------------------//  
			MongoDatabase db = mongoClient.getDatabase("ITCinfo");  
			//---------- Creating Collection -------------------------//  
			MongoCollection<Document> collection = db.getCollection("employee");  
			//---------- Creating Document ---------------------------//    
			collection.deleteOne(Filters.eq("name", "Sandip Mohapatra")); 
		      System.out.println("Document deleted successfully...");  
		      
		      // Retrieving the documents after updation 
		      // Getting the iterable object 
		      FindIterable<Document> iterDoc = collection.find(); 
		      int i = 1; 
		      // Getting the iterator 
		      Iterator it = iterDoc.iterator(); 
		      while (it.hasNext()) {  
		         System.out.println(it.next());  
		         i++; 
		      }       
		   } 
		}
-------------------------------------------------------------------------
prg-7
----------------------
import com.mongodb.client.MongoCollection; 
import com.mongodb.client.MongoDatabase; 
import org.bson.Document;
import com.mongodb.MongoClient;

public class Five {

	public static void main(String[] args) 
	{
				MongoClient mongoClient = new MongoClient( "localhost" , 27017 );  
			//---------- Creating DataBase ---------------------------//  
			MongoDatabase db = mongoClient.getDatabase("ITCinfo");  
						for (String name : db.listCollectionNames()) { 
		         System.out.println(name); 
		      } 
		   } 
		}
-------------------------------------------------------------------
prg-8
--------------
import com.mongodb.client.MongoCollection; 
import com.mongodb.client.MongoDatabase; 
import org.bson.Document;
import com.mongodb.MongoClient;

public class Fourth {

	public static void main(String[] args) 
	{
				MongoClient mongoClient = new MongoClient( "localhost" , 27017 );  
			//---------- Creating DataBase ---------------------------//  
			MongoDatabase db = mongoClient.getDatabase("ITCinfo");  
			//---------- Creating Collection -------------------------//  
			MongoCollection<Document> collection = db.getCollection("employee");  
			       collection.drop(); 
		      System.out.println("Collection dropped successfully");
		   } 
		}
----------------------------------------------------------------------------------
prg-9
-----------
package org.ITC;
import java.util.*;
import org.bson.Document;
import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
public class Seven {
	public static void main(String[] args) 
	{
		 Scanner ob=new Scanner(System.in); 
				try {
			  System.out.println("enter key and value");
			  String k1=ob.next(); 
			  String v1=ob.next();
			  System.out.println("enter key and value");
			  String k2=ob.next(); 
			  String v2=ob.next();
			  System.out.println("enter key and value");
			  String k3=ob.next(); 
			  String v3=ob.next();
			  System.out.println("enter key and value");
			  String k4=ob.next(); 
			  String v4=ob.next();
			  
			MongoClient mongoClient = new MongoClient( "localhost" , 27017 );  
			//---------- Creating DataBase ---------------------------//  
			MongoDatabase db = mongoClient.getDatabase("ITCinfoech");  
			//---------- Creating Collection -------------------------//  
			MongoCollection<Document> table = db.getCollection("employee");  
			//---------- Creating Document ---------------------------//    
			Document doc = new Document(k1,v1);  
			doc.append(k2,v2);  
			doc.append(k3,v3);  
			doc.append(k4,v4);  
						//----------- Inserting Data ------------------------------//  
			table.insertOne(doc);  
		}catch(Exception e){  
			System.out.println(e);  
					}  
	}
	}
----------------------------------------------------------------------------------------
prg-10
----------
import java.sql.*;
import java.util.*;
public class Second 
{
public static void main(String[] args) throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter studentno,name and address");
	int stdno=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/itcinfotech","root","1234");
	PreparedStatement st=con.prepareStatement("update student1 set name=?,address=? where stdno=?");
	st.setString(1,name);
	st.setString(2, address);
	st.setInt(3,stdno);
	st.execute();
	System.out.println("row updated");
}
}
---------------------------------------------------------------------------------------------------------------------
prg-11
------------
import java.sql.*;
import java.util.*;
public class Third 
{
public static void main(String[] args) throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter studentno");
	int stdno=ob.nextInt();
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/itcinfotech","root","1234");
	PreparedStatement st=con.prepareStatement("delete from student1 where stdno=?");
	st.setInt(1,stdno);
	st.execute();
	System.out.println("row deleted");
}
}
-----------------------------------------------------------------------------------------------------------------------------------------
ACID is an acronym that stands for Atomicity, Consistency, Isolation, and Durability. It represents a set of properties that guarantee reliability and consistency in database transactions. These properties are essential for ensuring data integrity and maintaining a high level of confidence in the reliability of a relational database management system (RDBMS). Let's dive into each component of ACID:

Atomicity: Atomicity ensures that a database transaction is treated as a single indivisible unit of work. Either all the operations within a transaction are completed successfully, or none of them are applied. If any part of the transaction fails, the entire transaction is rolled back, and the database returns to its original state before the transaction started.

Consistency: Consistency ensures that the database remains in a valid state both before and after a transaction. In other words, transactions should bring the database from one valid state to another. The data must satisfy all defined integrity constraints, domain constraints, and rules throughout the transaction.

Isolation: Isolation ensures that each transaction is executed in isolation from other transactions. This means that the intermediate state of a transaction is not visible to other transactions until it is committed. It prevents concurrent transactions from interfering with each other and helps maintain data consistency.

Durability: Durability guarantees that once a transaction is committed, its changes are permanent and will survive any subsequent system failures, such as power outages or crashes. Committed data is stored permanently and can be retrieved even after the system restarts.

The ACID properties collectively provide a strong foundation for data integrity, reliability, and consistency in RDBMS. 
------------------------------------------------------------------------------------------------------------------------
BASE is an acronym that stands for Basically Available, Soft state, and Eventually consistent. It represents an alternative set of properties to ACID, which are designed to provide higher scalability and availability in distributed systems, including some NoSQL databases. BASE sacrifices some of the strict consistency guarantees of ACID in favor of improved performance and availability. Let's explore each component of BASE:

Basically Available: The "Basically Available" property implies that the system should remain operational and provide a basic level of availability even in the presence of failures or network partitions. It prioritizes the system's ability to respond to user requests rather than guaranteeing immediate consistency.

Soft state: The "Soft state" property acknowledges that the state of the system can change over time, even without any input. In a distributed environment, each node might have different copies of data, and they can diverge until they eventually converge to a consistent state.

Eventually consistent: The "Eventually consistent" property means that, given enough time and once the system stabilizes after a network partition or failure, all replicas of data will eventually converge to a consistent state. However, during the convergence process, different nodes might see different versions of the data, resulting in temporary inconsistencies. It relies on background processes, such as automatic reconciliation, to bring the system back to consistency over time.

BASE is often associated with distributed databases, especially NoSQL databases like Apache Cassandra and Amazon DynamoDB. These systems are designed to scale horizontally and handle large amounts of data and traffic across multiple nodes. In scenarios where strict consistency is not critical or the trade-offs between consistency, availability, and partition tolerance are carefully considered, BASE provides a viable approach for building scalable and highly available distributed systems. However, it is important to note that BASE is not suitable for all applications, especially those that require strong consistency guarantees, and in such cases, ACID properties may be more appropriate.
-------------------------------------------------------------------------------------------------------------------------------------------
prg-11
------------
import java.sql.*;
import java.util.*;
public class First 
{
public static void main(String[] args) throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter studentno,name and address");
	int stdno=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/itcinfotech","root","1234");
	PreparedStatement st=con.prepareStatement("insert into student1 values(?,?,?)");
	st.setInt(1,stdno);
	st.setString(2,name);
	st.setString(3, address);
	st.execute();
	System.out.println("row inserted");
	Statement st1=con.createStatement();
	ResultSet rs=st1.executeQuery("select * from student1");
	while(rs.next())
	{
		System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
	}
	PreparedStatement st2=con.prepareStatement("select * from student1 where stdno=?");
	System.out.println("enter the studentno which you want to search");
	int stdnum=ob.nextInt();
	 st2.setInt(1,stdnum);
	 ResultSet rs1=st2.executeQuery();
	 int p=0;
	while(rs1.next())
	{
		p=1;
		System.out.println(rs1.getInt(1)+" "+rs1.getString(2)+" "+rs1.getString(3));
	}
	if(p==0)
	{
		System.out.println("invalid id");
	}
}
}
------------------------------------------------------------------------------------------------------------
JDBC NOTES
----------------------------------------------------------------------
JDBC (java database connectivity) 
----------------------------------------------------------------------
java(byte code) ----->driver----------->database(oracle/sqlserver)(ascii code)

A java database connectivity is an application which will behave as an interface between the java program and the database.

Database driver are 2 types:-
--------------------------------------------------------------
1)thick driver(java->driver->odbc->database)
2)thin driver(java->driver->database)

java have 4 driver:-
1)type 1 driver acts as a bridge between jdbc and other database connectivity mechanisms such as odbc.

2)type 2 driver converts jdbc call into database vendor specific .

3)type 3 driver translates jdbc calls into database server independent and middleware server specific net protocol calls .

4)type 4 driver is a pure java driver which implements the database protocol to interact directly with a database.

 
To interact with database the necessary steps are :-
----------------------------------------------------------------
creating connection with jdbc 
------------------------------------------------------------
1)Class.forName("oracle.jdbc.driver.OracleDriver");
load the driver class in the memory

2)Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","1234");
get connection from DriverManager


3)Statement st=con.createStatement();
get a statement from connection

4)ResultSet rs=st.executeQuery("select * from emp");
ResultSet interface refer memory Buffer 
using statement executeQuery

Sql package has 2 classes and 8 interfaces:-
--------------------------------------------------------
classes :-DriverManager,Types
interface :-Driver,Connection,Statement,PreparedStatement,CallableStatement,
ResultSet,ResultSetMetaData,DatabaseMetaData
------------------------------------------------------------------------------------------------------
there are 3 methods in statement interface
1)executeQuery()->select
2)executeUpdate()->update(return 0,1)
3)execute()->insert,delete,create,drop(return true,false)

java datatype:-String,int,double,JavaObject
Jdbc datatype:-varchar,char,number,number(7,2),clob,blob

To obtain data:- ResultSet
getInt(),getString(),getDouble(),getFloat(),getByte(),getShort(),getBoolean(),getLong(),getObject(),getChar()

Statement ->
It can handle one statement at one time.
--------------------------------------------------------------
PreparedStatement->
It can handle multiple sql queries.
It also used for putting the values for the sql queries at the runtime.
It is faster than the statement
------------------------------------------------------------------------
Callable Statement->
It is used to call stored functions and procedures of database.
--------------------------------------------------------------------------------
Type 4 driver:-
-------------------
import java.sql.*;
class SqlTest
{
public static void main(String arg[])throws Exception
{
Class.forName("oracle.jdbc.driver.OracleDriver");
Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","1234");
jdbc->protocal
oracle->database
thin->type4
localhost->local machine
1521->port no
xe->service id of oracle
system->username
1234->password

CallableStatement st=con.prepareCall("{call addition(?,?,?)}");
st.setInt(1,10);
st.setInt(2,20);
st.registerOutParameter(3,Types.INTEGER);
st.execute();
int n=st.getInt(3);
System.out.println(n);
}
}
-----------------
create or replace procedure addition(i IN number,j IN number,K OUT number)
is 
begin
K:=i+j;
end;
--------------------------

ResultSetMetaData:-

ResultSetMetaData md=rs.getMetaData();
System.out.println(md.getColumnCount());
System.out.println(md.getColumnName());

DatabaseMetaData:-Data about data

DatabaseMetaData md=con.getMetaData();
System.out.println(md.getDriverVersion());
System.out.println(md.getDriverName());
-----------------------------------------------------------------------------

























